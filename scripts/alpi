#!/bin/bash
#
# This script automates the installation outlined on:
# https://archlinuxarm.org/platforms/armv6/raspberry-pi
#
# It preconfigures the Pi for easy headless setup over Wi-Fi.
# Root privileges are required.
#
#


# Check the number of arguments.
if [ $# -ne 0 ]; then

  echo
  echo "Usage: $(basename $0)"
  echo
  echo " Arch install script for Raspberry Pi 1 Model A."
  echo " It preconfigures the Pi for easy headless setup over Wi-Fi."
  echo
  echo " This script assumes a network with WPA encryption."
  echo " The hash requires a key with 8-63 characters."
  echo
  echo " The script's target is hard coded to '/dev/mmcblk0'."
  echo " Different needs?"
  echo " Feel free to edit the script."
  echo
  exit 1

fi

# Check if we have root priviliges
if [ "$(whoami)" != "root" ]; then

  echo "Error while checking security priviliges."
  echo "Make sure to run the script with 'sudo'."
  exit 1

fi

# Check if the Multi-Media Card BLOCK device exists.
if [ ! -e "/dev/mmcblk0" ]; then

  echo "Error while looking for '/dev/mmcblk0'."
  echo "Make sure an SD card is inserted."
  exit 1

fi

# Get network information from the user.
while true; do

  echo "Enter the ESSID of your network:"
  read -r essid
  echo "Enter the password of your network:"
  read -rs key
  echo
  echo "Password length: ${#key}"
  printf "All set? [y/N] "
  read -rn 1 answer
  echo
  if [ "$answer" = "y" ]; then break; fi

done

# Generate the hash.
for line in $(wpa_passphrase '$essid' '$key'); do

  if [ $? != 0 ]; then echo "hi"; exit 1; fi
  if [[ "$line" =~ ^psk ]]; then hash="${line:4}"; fi

done
echo "Password hashed."

# Create a temporary folder.
while true; do

  directory="/tmp/alpi.$(head /dev/urandom | tr -dc [:alnum:] | head -c 6)"

  if [ ! -d "$directory" ]; then

    mkdir "$directory"
    cd "$directory"
    break

  fi

done
echo "Working in temporary folder: $directory"

# Unmount the device's partitions.
while read -r line; do

  words=($line)
  if [[ "${words[0]}" =~ ^/dev/mmcblk0 ]]; then umount "${words[1]}"; fi
  if [ $? != 0 ]; then exit 1; fi

done < /etc/mtab

# Partition the device.
{

  echo "o"
  echo "n"
  echo "p"
  echo "1"
  echo
  echo "+100M"
  echo "t"
  echo "c"
  echo "n"
  echo "p"
  echo "2"
  echo
  echo
  echo "w"

} | fdisk /dev/mmcblk0 > /dev/null
echo "Device partitioned."

# Create and mount the FAT filesystem.
mkfs.vfat /dev/mmcblk0p1 > /dev/null
mkdir boot
mount /dev/mmcblk0p1 boot

# Create and mount the ext4 filesystem.
mkfs.ext4 /dev/mmcblk0p2 > /dev/null
mkdir root
mount /dev/mmcblk0p2 root

# Download and extract the root filesystem.
if [ ! -e "ArchLinuxARM-rpi-latest.tar.gz" ]; then

  echo "Downloading Arch Linux ARM..."
  wget -q http://os.archlinuxarm.org/os/ArchLinuxARM-rpi-latest.tar.gz

  if [ $? != 0 ]; then

    echo "Error while downloading Arch Linux ARM."
    exit 1

  fi

fi

echo "Unpacking the root filesystem..."
bsdtar -xpf ArchLinuxARM-rpi-latest.tar.gz -C root > /dev/null
sync

# Move the boot files to the first parition.
mv root/boot/* boot

# Overwrite the filesystem table.
{

  echo "#"
  echo "# /etc/fstab: static file system information"
  echo "#"
  echo "# <file system> <dir> <type> <options> <dump> <pass>"
  echo
  echo "# System partitions"
  echo "/dev/mmcblk0p1 /boot vfat defaults                   0 0"
  echo "/dev/mmcblk0p2 /     ext4 noatime,nodiratime,discard 0 1"
  echo
  echo "# Temporary partitions"
  echo "tmpfs /tmp     tmpfs defaults,noatime,nodiratime,nosuid,nodev,noexec,size=10M 0 0"
  echo "tmpfs /var/log tmpfs defaults,noatime,nodiratime,nosuid,nodev,noexec,size=10M 0 0"

} > root/etc/fstab
echo "File system table written."

# Create the netctl profile.
while read -r line; do

  if   [[ "$line" =~ ESSID ]]; then line="ESSID='$essid'"
  elif [[ "$line" =~ Key   ]]; then line="Key=\\\"$hash" ; fi
  echo "$line"

done < root/etc/netctl/examples/wireless-wpa \
     > root/etc/netctl/wlan
echo "Wifi profile created: wlan."

# Enable the netctl profile.
{

  echo ".include /usr/lib/systemd/system/netctl@.service"
  echo
  echo "[Unit]"
  echo "Description=A simple WPA encrypted wireless connection"
  echo "BindsTo=sys-subsystem-net-devices-wlan0.device"
  echo "After=sys-subsystem-net-devices-wlan0.device"

} > 'root/etc/systemd/system/netctl@wlan.service'

ln -s 'root/etc/systemd/system/netctl@wlan.service' \
      'root/etc/systemd/system/multi-user.target.wants/netctl@wlan.service'
echo "Wifi profile enabled."

# Disable journalctl logging.
while read -r line; do

  if [[ "$line" =~ Storage ]]; then line="Storage=none"; fi
  echo "$line"
  break

done < root/etc/systemd/journald.conf \
     > tmp && mv tmp root/etc/systemd/journald.conf
echo "Disabled journalctl logging."

# Unmount the two partitions.
umount boot root

# Disable journaling for the root partition.
tune2fs -O ^has_journal /dev/mmcblk0p2 > /dev/null
echo "Disabled journaling for the root parition."

# Remove the temporary directory.
rm -r "$directory"
echo "Removed working directory: $directory"

# Notify and exit.
echo "The installation was completed successfully."
